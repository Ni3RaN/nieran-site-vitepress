import{_ as a,c as s,o as e,d as n}from"./app.26036da2.js";const i="/assets/img3.9f326f2f.png",l="/assets/img2.523f87bc.png",p="/assets/img4.9980ae69.png",t="/assets/img1.587deb2d.png",r="/assets/img5.9db87fa3.png",A=JSON.parse('{"title":"G. Easy Glide","description":"","frontmatter":{},"headers":[{"level":3,"title":"圆心角90度","slug":"圆心角90度","link":"#圆心角90度","children":[]},{"level":3,"title":"圆心角约等于131度","slug":"圆心角约等于131度","link":"#圆心角约等于131度","children":[]},{"level":3,"title":"可得出结论：","slug":"可得出结论","link":"#可得出结论","children":[]}],"relativePath":"Tutorial/zjcpc/index.md"}'),c={name:"Tutorial/zjcpc/index.md"},d=n(`<h1 id="g-easy-glide" tabindex="-1">G. Easy Glide <a class="header-anchor" href="#g-easy-glide" aria-hidden="true">#</a></h1><p>经过给定的点时速度从v1变成v2，维持3s变回v1，把起点，终点和给定点连起来，就是一个最短路问题，朴素迪杰斯特拉或者堆优化都可以。</p><h1 id="m-bpbbppbpbb" tabindex="-1">M. BpbBppbpBB <a class="header-anchor" href="#m-bpbbppbpbb" aria-hidden="true">#</a></h1><p>统计形如</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#A6ACCD;">######</span></span>
<span class="line"><span style="color:#A6ACCD;">##..##</span></span>
<span class="line"><span style="color:#A6ACCD;">#....#</span></span>
<span class="line"><span style="color:#A6ACCD;">#....#</span></span>
<span class="line"><span style="color:#A6ACCD;">##..##</span></span>
<span class="line"><span style="color:#A6ACCD;">######</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>的数量即可，也可以比较两个之间的距离判断（我比赛时这么写的...）</p><h1 id="i-barbecue" tabindex="-1">I. Barbecue <a class="header-anchor" href="#i-barbecue" aria-hidden="true">#</a></h1><p>操作的时候如果不是回文字符串，并且长度大于2，那么总是可以操作使字符串不变成回文串</p><p>所以只需要判断字符串是不是回文，如果不是判断字符串的长度的奇偶。</p><p>判断子字符串是否是回文，可以用hash，也可以用Manacher(我比赛时用了这个，用起来比hash烦)</p><h1 id="j-frog" tabindex="-1">J. Frog <a class="header-anchor" href="#j-frog" aria-hidden="true">#</a></h1><p>看图</p><h3 id="圆心角90度" tabindex="-1">圆心角90度 <a class="header-anchor" href="#圆心角90度" aria-hidden="true">#</a></h3><p><img src="`+i+'" alt="img3.png"></p><h3 id="圆心角约等于131度" tabindex="-1">圆心角约等于131度 <a class="header-anchor" href="#圆心角约等于131度" aria-hidden="true">#</a></h3><p><img src="'+l+'" alt="img2.png"></p><h3 id="可得出结论" tabindex="-1">可得出结论： <a class="header-anchor" href="#可得出结论" aria-hidden="true">#</a></h3><p>设圆心角为θ，</p><ul><li>θ=0，最少0步，</li><li>θ≤90，最少2步，如图所示： <img src="'+p+'" alt="img1.png"></li><li>90&lt;θ≤131，最少3步，如图所示： <img src="'+t+'" alt="img4.png"></li><li>131&lt;θ≤180，最少4步，如图所示： <img src="'+r+'" alt="img5.png"></li><li>θ&gt;180，与(360-θ)的步数相同，走法相反。</li></ul>',19),o=[d];function h(g,_,b,m,u,f){return e(),s("div",null,o)}const x=a(c,[["render",h]]);export{A as __pageData,x as default};
